{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","handleInput","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","console","log","newItems","filteredItems","filter","onSubmit","this","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gSAGe,SAASA,EAAUC,GAC9B,IACMC,EADOD,EAAME,MACIC,KAAI,SAAAC,GACvB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAAMC,SAC/C,SAACC,GACGZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QAChD,8BACA,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,KAAK,QAAQC,QAAS,kBAAIhB,EAAMiB,WAAWb,EAAKE,cAI7F,OACI,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC/BlB,I,mBCfbmB,IAAQC,IAAIC,K,IAESC,E,kDACnB,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IASRwB,YAAY,SAACZ,GACX,EAAKa,SAAS,CACZC,YAAY,CACVhB,KAAKE,EAAEE,OAAOL,MACdH,IAAIqB,KAAKC,UAdG,EAmBlBC,QAAQ,SAACjB,GACPA,EAAEkB,iBACF,IAAMC,EAAQ,EAAKC,MAAMN,YAEzB,GADAO,QAAQC,IAAIH,GACM,KAAfA,EAAQrB,KAAU,CACnB,IAAMyB,EAAS,GAAD,mBAAK,EAAKH,MAAM9B,OAAhB,CAAsB6B,IACpC,EAAKN,SAAS,CACZvB,MAAMiC,EACNT,YAAY,CACVhB,KAAK,GACLJ,IAAI,QA7BM,EAsClBW,WAAW,SAACX,GACV,IAAM8B,EAAc,EAAKJ,MAAM9B,MAAMmC,QAAO,SAAAjC,GAAI,OAAEA,EAAKE,MAAMA,KAC7D,EAAKmB,SAAS,CACZvB,MAAMkC,KAzCQ,EA6ClBvB,UAAU,SAACH,EAAKJ,GACd,IAAMJ,EAAM,EAAK8B,MAAM9B,MACvBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZF,EAAKM,KAAKA,MAGd,EAAKe,SAAS,CACZvB,MAAMA,KAnDR,EAAK8B,MAAM,CACT9B,MAAM,GACNwB,YAAY,CACVhB,KAAK,GACLJ,IAAI,KANQ,E,qDA2DhB,OACE,yBAAKD,UAAU,OACf,gCACE,0BAAMG,GAAG,aAAa8B,SAAUC,KAAKV,SACnC,2BAAOtB,KAAK,OAAOiC,YAAY,aAAa/B,MAAO8B,KAAKP,MAAMN,YAAYhB,KAAMC,SAAU4B,KAAKf,cAE/F,4BAAQjB,KAAK,UAAb,SAGJ,kBAAC,EAAD,CAAWL,MAAOqC,KAAKP,MAAM9B,MAC7Be,WAAYsB,KAAKtB,WAAYJ,UAAW0B,KAAK1B,iB,GAtElB4B,aCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.9c99f9d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\nexport default function ListItems(props) {\r\n    const items= props.items;\r\n    const listItems= items.map(item=>{\r\n        return <div className=\"list\" key={item.key}>\r\n            <p>\r\n                <input type=\"text\" id={item.key} value={item.text} onChange={\r\n                    (e)=>{\r\n                        props.setUpdate(e.target.value,item.key)}}/>\r\n            <span>\r\n            <FontAwesomeIcon className=\"faicons\" icon='trash' onClick={()=>props.deleteItem(item.key)}/></span></p>\r\n            \r\n        </div>\r\n    })\r\n    return (\r\n        <div>\r\n            <FlipMove duration={300} easing=\"ease-in-out\">\r\n            {listItems}\r\n\r\n            </FlipMove>\r\n           \r\n\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\nimport ListItems from './ListItems'\nimport{ library } from '@fortawesome/fontawesome-svg-core';\nimport{faTrash} from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faTrash);\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n  }\n  handleInput=(e)=>{\n    this.setState({\n      currentItem:{\n        text:e.target.value,\n        key:Date.now()\n      }\n    })\n  }\n\n  addItem=(e)=>{\n    e.preventDefault();\n    const newItem=this.state.currentItem;\n    console.log(newItem);\n    if(newItem.text!==\"\"){\n      const newItems=[...this.state.items,newItem];\n      this.setState({\n        items:newItems,\n        currentItem:{\n          text:'',\n          key:''\n        }\n\n             })\n    }\n\n\n\n  }\n  deleteItem=(key)=>{\n    const filteredItems=this.state.items.filter(item=>item.key!==key);\n    this.setState({\n      items:filteredItems\n    })\n\n  }\n  setUpdate=(text,key)=>{\n    const items=this.state.items;\n    items.map(item=>{\n      if(item.key===key){\n        item.text=text;\n      }\n    })\n    this.setState({\n      items:items\n    })\n  }\n\n  \n  render() {\n    return (\n      <div className=\"app\">\n      <header>\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n          <input type=\"text\" placeholder=\"Enter text\" value={this.state.currentItem.text} onChange={this.handleInput}/>\n          \n          <button type=\"submit\">Add</button>\n        </form>\n      </header>\n      <ListItems items={this.state.items}\n      deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport './ListItems.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}